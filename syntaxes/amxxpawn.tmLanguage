<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>sma</string>
		<string>inc</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(?x)
		 /\*\*(?!\*)
		|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))
	</string>
	<key>foldingStopMarker</key>
	<string>(?&lt;!\*)\*\*/|^\s*\}</string>
	<key>name</key>
	<string>AMXXPawn</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-enabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-disabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-other</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?x)
				 (default)\s*:|                                             #ignore "default:"
				 \?(?!.*\().*?(?'ident'[A-Za-z_@][A-Za-z0-9_@]*+)\s*:|   #ignore "? identifier :"
				 (case)\s+(\g'ident')\s*:|                                     #ignore "case identifier:"
				 :\s*\g'ident'\s*|                                             #ignore ":identifier:"
				 (
					 {(?:\s*\g'ident'\s*(?:\,)?)+}\s*:|                       #a list of tags or
					 \b\g'ident'\s*:                                          #a single tag
				 )
			</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.amxxpawn</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.amxxpawn</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>constant.other.amxxpawn</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>storage.type.amxxpawn</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\b</string>
			<key>name</key>
			<string>keyword.control.amxxpawn</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(enum)\s+((?:_:\s*)?[A-Za-z_@][A-Za-z0-9_@]*)?</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.amxxpawn</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.amxxpawn</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(const|static|stock|public|new|native|forward)\b</string>
			<key>name</key>
			<string>storage.modifier.amxxpawn</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(true|false|__DATE__|__TIME__|__LINE__|__FILE__|__BINARY_PATH__|__BINARY_NAME__|__BINARY__|cellbits|cellmax|cellmin|__Pawn|debug)\b</string>
			<key>name</key>
			<string>constant.language.amxxpawn</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#sizeof</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|([0-9]+\.?[0-9]*))\b</string>
			<key>name</key>
			<string>constant.numeric.amxxpawn</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
				 ^\s*\#\s*(define)\s+           # define
				 ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))   # macro name
				 (?:                           # and optionally:
					 (\()                       # an open parenthesis
						 (
							 \s* \g&lt;id&gt; \s* # first argument
							 ((,) \s* \g&lt;id&gt; \s*)* # additional arguments
							 (?:\.\.\.)?           # varargs ellipsis?
						 )
					 (\))                       # a close parenthesis
				 )?
			</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.define.amxxpawn</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.preprocessor.amxxpawn</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.amxxpawn</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.preprocessor.amxxpawn</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.parameters.amxxpawn</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.amxxpawn</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.macro.amxxpawn</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.amxxpawn</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(error)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.error.amxxpawn</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$</string>
			<key>name</key>
			<string>meta.preprocessor.diagnostic.amxxpawn</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.amxxpawn</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*((?:try)?include)\b\s*</string>
			<key>end</key>
			<string>$\n?</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma-mark</string>
		</dict>
		<dict>
			<key>match</key>
			<string>^\s*#\s*(define|if|else|endif|pragma|error|endinput|undef)\b</string>
			<key>name</key>
			<string>keyword.control.import.amxxpawn</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#functions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>base_rules</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#strings</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#preprocessor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
			</array>
		</dict>

		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>name</key>
					<string>string.quoted.double.amxxpawn</string>
					<key>match</key>
					<string>"[^"\\]*(?:\\.[^"\\]*)*"</string>
				</dict>
				<dict>
					<key>name</key>
					<string>string.quoted.single.amxxpawn</string>
					<key>match</key>
					<string>'[^'\\]*(?:\\.[^'\\]*)*'</string>
				</dict>
			</array>
		</dict>

		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.amxxpawn</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.amxxpawn</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.amxxpawn</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.amxxpawn</string>
				</dict>
			</array>
		</dict>

		<key>keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(break|case|continue|default|do|else|for|goto|if|return|switch|while)\b</string>
					<key>name</key>
					<string>keyword.control.amxxpawn</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(const|static|stock|public|new|native|forward|enum)\b</string>
					<key>name</key>
					<string>storage.modifier.amxxpawn</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(true|false|__DATE__|__TIME__|__LINE__|__FILE__|__BINARY_PATH__|__BINARY_NAME__|__BINARY__|cellbits|cellmax|cellmin|__Pawn|debug)\b</string>
					<key>name</key>
					<string>constant.language.amxxpawn</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0(x|X)[0-9a-fA-F]*)|([0-9]+\.?[0-9]*))\b</string>
					<key>name</key>
					<string>constant.numeric.amxxpawn</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(sizeof)\b</string>
					<key>name</key>
					<string>keyword.operator.sizeof.amxxpawn</string>
				</dict>
			</array>
		</dict>
		
		<key>preprocessor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*#\s*((?:try)?include)\b\s*</string>
					<key>end</key>
					<string>$\n?</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#strings</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>^\s*#\s*(define|if|else|endif|pragma|error|endinput|undef)\b</string>
					<key>name</key>
					<string>keyword.control.import.amxxpawn</string>
				</dict>
			</array>
		</dict>

		<key>functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key><dict><key>name</key><string>support.function.any-method.amxxpawn</string></dict>
						<key>2</key><dict><key>name</key><string>punctuation.definition.parameters.amxxpawn</string></dict>
					</dict>
					<key>match</key>
					<string>\b([A-Za-z_@][A-Za-z0-9_@]*)\s*(\()</string>
				</dict>
			</array>
		</dict>
		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.block.amxxpawn</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#base_rules</string>
				</dict>
			</array>
		</dict>
		</dict>
	<key>scopeName</key>
	<string>source.amxxpawn</string>
	<key>uuid</key>
	<string>B311E234-7BCD-4821-8455-4A1D8487E654</string>
</dict>
</plist>